
bluepill-freeRTOS-base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002434  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002544  08002544  00012544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002580  08002580  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002580  08002580  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002580  08002580  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002580  08002580  00012580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002584  08002584  00012584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000217c  20000014  0800259c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002190  0800259c  00022190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abdc  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d50  00000000  00000000  0002ac19  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b88  00000000  00000000  0002c970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a90  00000000  00000000  0002d4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001430c  00000000  00000000  0002df88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008db5  00000000  00000000  00042294  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074814  00000000  00000000  0004b049  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf85d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e50  00000000  00000000  000bf8d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	0800252c 	.word	0x0800252c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	0800252c 	.word	0x0800252c

08000150 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b090      	sub	sp, #64	; 0x40
 8000154:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000156:	f107 0318 	add.w	r3, r7, #24
 800015a:	2228      	movs	r2, #40	; 0x28
 800015c:	2100      	movs	r1, #0
 800015e:	4618      	mov	r0, r3
 8000160:	f002 f9dc 	bl	800251c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000164:	1d3b      	adds	r3, r7, #4
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]
 8000170:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000172:	2301      	movs	r3, #1
 8000174:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000176:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800017a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800017c:	2300      	movs	r3, #0
 800017e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000180:	2301      	movs	r3, #1
 8000182:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000184:	2302      	movs	r3, #2
 8000186:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800018c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800018e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000192:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000194:	f107 0318 	add.w	r3, r7, #24
 8000198:	4618      	mov	r0, r3
 800019a:	f001 fb6b 	bl	8001874 <HAL_RCC_OscConfig>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d001      	beq.n	80001a8 <SystemClock_Config+0x58>
		Error_Handler();
 80001a4:	f000 f8ae 	bl	8000304 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80001a8:	230f      	movs	r3, #15
 80001aa:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ac:	2302      	movs	r3, #2
 80001ae:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001b0:	2300      	movs	r3, #0
 80001b2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ba:	2300      	movs	r3, #0
 80001bc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80001be:	1d3b      	adds	r3, r7, #4
 80001c0:	2102      	movs	r1, #2
 80001c2:	4618      	mov	r0, r3
 80001c4:	f001 fdd6 	bl	8001d74 <HAL_RCC_ClockConfig>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d001      	beq.n	80001d2 <SystemClock_Config+0x82>
		Error_Handler();
 80001ce:	f000 f899 	bl	8000304 <Error_Handler>
	}
}
 80001d2:	bf00      	nop
 80001d4:	3740      	adds	r7, #64	; 0x40
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
	...

080001dc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b088      	sub	sp, #32
 80001e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80001e2:	f107 0310 	add.w	r3, r7, #16
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80001f0:	4b1e      	ldr	r3, [pc, #120]	; (800026c <MX_GPIO_Init+0x90>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a1d      	ldr	r2, [pc, #116]	; (800026c <MX_GPIO_Init+0x90>)
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b1b      	ldr	r3, [pc, #108]	; (800026c <MX_GPIO_Init+0x90>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0310 	and.w	r3, r3, #16
 8000204:	60fb      	str	r3, [r7, #12]
 8000206:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <MX_GPIO_Init+0x90>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a17      	ldr	r2, [pc, #92]	; (800026c <MX_GPIO_Init+0x90>)
 800020e:	f043 0320 	orr.w	r3, r3, #32
 8000212:	6193      	str	r3, [r2, #24]
 8000214:	4b15      	ldr	r3, [pc, #84]	; (800026c <MX_GPIO_Init+0x90>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	f003 0320 	and.w	r3, r3, #32
 800021c:	60bb      	str	r3, [r7, #8]
 800021e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <MX_GPIO_Init+0x90>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <MX_GPIO_Init+0x90>)
 8000226:	f043 0304 	orr.w	r3, r3, #4
 800022a:	6193      	str	r3, [r2, #24]
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <MX_GPIO_Init+0x90>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	f003 0304 	and.w	r3, r3, #4
 8000234:	607b      	str	r3, [r7, #4]
 8000236:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023e:	480c      	ldr	r0, [pc, #48]	; (8000270 <MX_GPIO_Init+0x94>)
 8000240:	f001 fae8 	bl	8001814 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000248:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024a:	2301      	movs	r3, #1
 800024c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024e:	2300      	movs	r3, #0
 8000250:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000252:	2302      	movs	r3, #2
 8000254:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	4619      	mov	r1, r3
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <MX_GPIO_Init+0x94>)
 800025e:	f001 f97f 	bl	8001560 <HAL_GPIO_Init>

}
 8000262:	bf00      	nop
 8000264:	3720      	adds	r7, #32
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40021000 	.word	0x40021000
 8000270:	40011000 	.word	0x40011000

08000274 <main>:

/* USER CODE BEGIN 4 */
int main(void) {
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af02      	add	r7, sp, #8
	/* reset of all peripherals, initializes the flash interface and the Systick. */
	HAL_Init();
 800027a:	f001 f85f 	bl	800133c <HAL_Init>

	/* configure the system clock */
	SystemClock_Config();
 800027e:	f7ff ff67 	bl	8000150 <SystemClock_Config>

	/* initialize all configured peripherals */
	MX_GPIO_Init();
 8000282:	f7ff ffab 	bl	80001dc <MX_GPIO_Init>

	xTaskCreate(
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <main+0x2c>)
 8000288:	9301      	str	r3, [sp, #4]
 800028a:	2301      	movs	r3, #1
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	2300      	movs	r3, #0
 8000290:	2280      	movs	r2, #128	; 0x80
 8000292:	4904      	ldr	r1, [pc, #16]	; (80002a4 <main+0x30>)
 8000294:	4804      	ldr	r0, [pc, #16]	; (80002a8 <main+0x34>)
 8000296:	f000 f9eb 	bl	8000670 <xTaskCreate>
			PRIORITY_TASK_LED,			// priority
			&taskLedHandle				// taskHandle
	);

	/* start the scheduler */
	vTaskStartScheduler();
 800029a:	f000 fb55 	bl	8000948 <vTaskStartScheduler>

	/* infinite loop */
	for (;;);
 800029e:	e7fe      	b.n	800029e <main+0x2a>
 80002a0:	20002148 	.word	0x20002148
 80002a4:	08002544 	.word	0x08002544
 80002a8:	080002ad 	.word	0x080002ad

080002ac <taskLed>:
}

void taskLed(void *pvParameters) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80002b4:	f000 fc1a 	bl	8000aec <xTaskGetTickCount>
 80002b8:	4603      	mov	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
	const TickType_t timeMiliseconds = 1000 / portTICK_PERIOD_MS;
 80002bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c0:	60fb      	str	r3, [r7, #12]

	for (;;) {
		/* board LED, mapped to PC13 pin */
		HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 80002c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c6:	4805      	ldr	r0, [pc, #20]	; (80002dc <taskLed+0x30>)
 80002c8:	f001 fabc 	bl	8001844 <HAL_GPIO_TogglePin>

		/* 1s delay */
		vTaskDelayUntil(&xLastWakeTime, timeMiliseconds);
 80002cc:	f107 0308 	add.w	r3, r7, #8
 80002d0:	68f9      	ldr	r1, [r7, #12]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 fae8 	bl	80008a8 <vTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 80002d8:	e7f3      	b.n	80002c2 <taskLed+0x16>
 80002da:	bf00      	nop
 80002dc:	40011000 	.word	0x40011000

080002e0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d101      	bne.n	80002f6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80002f2:	f001 f839 	bl	8001368 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80002f6:	bf00      	nop
 80002f8:	3708      	adds	r7, #8
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40012c00 	.word	0x40012c00

08000304 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	for (;;);
 8000308:	e7fe      	b.n	8000308 <Error_Handler+0x4>
	...

0800030c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000312:	4b15      	ldr	r3, [pc, #84]	; (8000368 <HAL_MspInit+0x5c>)
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	4a14      	ldr	r2, [pc, #80]	; (8000368 <HAL_MspInit+0x5c>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6193      	str	r3, [r2, #24]
 800031e:	4b12      	ldr	r3, [pc, #72]	; (8000368 <HAL_MspInit+0x5c>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	60bb      	str	r3, [r7, #8]
 8000328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <HAL_MspInit+0x5c>)
 800032c:	69db      	ldr	r3, [r3, #28]
 800032e:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <HAL_MspInit+0x5c>)
 8000330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000334:	61d3      	str	r3, [r2, #28]
 8000336:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <HAL_MspInit+0x5c>)
 8000338:	69db      	ldr	r3, [r3, #28]
 800033a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000342:	4b0a      	ldr	r3, [pc, #40]	; (800036c <HAL_MspInit+0x60>)
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <HAL_MspInit+0x60>)
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800035e:	bf00      	nop
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40021000 	.word	0x40021000
 800036c:	40010000 	.word	0x40010000

08000370 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b08c      	sub	sp, #48	; 0x30
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000380:	2200      	movs	r2, #0
 8000382:	6879      	ldr	r1, [r7, #4]
 8000384:	2019      	movs	r0, #25
 8000386:	f001 f8c0 	bl	800150a <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 800038a:	2019      	movs	r0, #25
 800038c:	f001 f8d9 	bl	8001542 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000390:	4b1e      	ldr	r3, [pc, #120]	; (800040c <HAL_InitTick+0x9c>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a1d      	ldr	r2, [pc, #116]	; (800040c <HAL_InitTick+0x9c>)
 8000396:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b1b      	ldr	r3, [pc, #108]	; (800040c <HAL_InitTick+0x9c>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003a8:	f107 0210 	add.w	r2, r7, #16
 80003ac:	f107 0314 	add.w	r3, r7, #20
 80003b0:	4611      	mov	r1, r2
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 fe48 	bl	8002048 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80003b8:	f001 fe32 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 80003bc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80003be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003c0:	4a13      	ldr	r2, [pc, #76]	; (8000410 <HAL_InitTick+0xa0>)
 80003c2:	fba2 2303 	umull	r2, r3, r2, r3
 80003c6:	0c9b      	lsrs	r3, r3, #18
 80003c8:	3b01      	subs	r3, #1
 80003ca:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <HAL_InitTick+0xa4>)
 80003ce:	4a12      	ldr	r2, [pc, #72]	; (8000418 <HAL_InitTick+0xa8>)
 80003d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <HAL_InitTick+0xa4>)
 80003d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <HAL_InitTick+0xa4>)
 80003dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <HAL_InitTick+0xa4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <HAL_InitTick+0xa4>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80003ec:	4809      	ldr	r0, [pc, #36]	; (8000414 <HAL_InitTick+0xa4>)
 80003ee:	f001 fe79 	bl	80020e4 <HAL_TIM_Base_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d104      	bne.n	8000402 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80003f8:	4806      	ldr	r0, [pc, #24]	; (8000414 <HAL_InitTick+0xa4>)
 80003fa:	f001 fea7 	bl	800214c <HAL_TIM_Base_Start_IT>
 80003fe:	4603      	mov	r3, r0
 8000400:	e000      	b.n	8000404 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000402:	2301      	movs	r3, #1
}
 8000404:	4618      	mov	r0, r3
 8000406:	3730      	adds	r7, #48	; 0x30
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40021000 	.word	0x40021000
 8000410:	431bde83 	.word	0x431bde83
 8000414:	2000214c 	.word	0x2000214c
 8000418:	40012c00 	.word	0x40012c00

0800041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <HardFault_Handler+0x4>

0800042e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <MemManage_Handler+0x4>

08000434 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <BusFault_Handler+0x4>

0800043a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <UsageFault_Handler+0x4>

08000440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000450:	4802      	ldr	r0, [pc, #8]	; (800045c <TIM1_UP_IRQHandler+0x10>)
 8000452:	f001 fe9e 	bl	8002192 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	2000214c 	.word	0x2000214c

08000460 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000464:	4b15      	ldr	r3, [pc, #84]	; (80004bc <SystemInit+0x5c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a14      	ldr	r2, [pc, #80]	; (80004bc <SystemInit+0x5c>)
 800046a:	f043 0301 	orr.w	r3, r3, #1
 800046e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <SystemInit+0x5c>)
 8000472:	685a      	ldr	r2, [r3, #4]
 8000474:	4911      	ldr	r1, [pc, #68]	; (80004bc <SystemInit+0x5c>)
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <SystemInit+0x60>)
 8000478:	4013      	ands	r3, r2
 800047a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <SystemInit+0x5c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <SystemInit+0x5c>)
 8000482:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800048a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800048c:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <SystemInit+0x5c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <SystemInit+0x5c>)
 8000492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000496:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <SystemInit+0x5c>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4a07      	ldr	r2, [pc, #28]	; (80004bc <SystemInit+0x5c>)
 800049e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <SystemInit+0x5c>)
 80004a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004ac:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <SystemInit+0x64>)
 80004ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000
 80004c0:	f8ff0000 	.word	0xf8ff0000
 80004c4:	e000ed00 	.word	0xe000ed00

080004c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004ca:	e003      	b.n	80004d4 <LoopCopyDataInit>

080004cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80004d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80004d2:	3104      	adds	r1, #4

080004d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80004d4:	480a      	ldr	r0, [pc, #40]	; (8000500 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80004d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004dc:	d3f6      	bcc.n	80004cc <CopyDataInit>
  ldr r2, =_sbss
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80004e0:	e002      	b.n	80004e8 <LoopFillZerobss>

080004e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80004e4:	f842 3b04 	str.w	r3, [r2], #4

080004e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80004ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004ec:	d3f9      	bcc.n	80004e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004ee:	f7ff ffb7 	bl	8000460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004f2:	f001 ffef 	bl	80024d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f6:	f7ff febd 	bl	8000274 <main>
  bx lr
 80004fa:	4770      	bx	lr
  ldr r3, =_sidata
 80004fc:	08002588 	.word	0x08002588
  ldr r0, =_sdata
 8000500:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000504:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8000508:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 800050c:	20002190 	.word	0x20002190

08000510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <ADC1_2_IRQHandler>

08000512 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f103 0208 	add.w	r2, r3, #8
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f04f 32ff 	mov.w	r2, #4294967295
 800052a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f103 0208 	add.w	r2, r3, #8
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f103 0208 	add.w	r2, r3, #8
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr

08000568 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	689a      	ldr	r2, [r3, #8]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	683a      	ldr	r2, [r7, #0]
 800058c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	601a      	str	r2, [r3, #0]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80005ae:	b480      	push	{r7}
 80005b0:	b085      	sub	sp, #20
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d103      	bne.n	80005ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	691b      	ldr	r3, [r3, #16]
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e00c      	b.n	80005e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3308      	adds	r3, #8
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	e002      	b.n	80005dc <vListInsert+0x2e>
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d2f6      	bcs.n	80005d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	683a      	ldr	r2, [r7, #0]
 80005f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	601a      	str	r2, [r3, #0]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	691b      	ldr	r3, [r3, #16]
 800062a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	6892      	ldr	r2, [r2, #8]
 8000634:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	6852      	ldr	r2, [r2, #4]
 800063e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	429a      	cmp	r2, r3
 8000648:	d103      	bne.n	8000652 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	689a      	ldr	r2, [r3, #8]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	1e5a      	subs	r2, r3, #1
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	681b      	ldr	r3, [r3, #0]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr

08000670 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	; 0x30
 8000674:	af04      	add	r7, sp, #16
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	4613      	mov	r3, r2
 800067e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fd69 	bl	800115c <pvPortMalloc>
 800068a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00e      	beq.n	80006b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000692:	204c      	movs	r0, #76	; 0x4c
 8000694:	f000 fd62 	bl	800115c <pvPortMalloc>
 8000698:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d003      	beq.n	80006a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	697a      	ldr	r2, [r7, #20]
 80006a4:	631a      	str	r2, [r3, #48]	; 0x30
 80006a6:	e005      	b.n	80006b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80006a8:	6978      	ldr	r0, [r7, #20]
 80006aa:	f000 fde5 	bl	8001278 <vPortFree>
 80006ae:	e001      	b.n	80006b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d013      	beq.n	80006e2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80006ba:	88fa      	ldrh	r2, [r7, #6]
 80006bc:	2300      	movs	r3, #0
 80006be:	9303      	str	r3, [sp, #12]
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	9302      	str	r3, [sp, #8]
 80006c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	68b9      	ldr	r1, [r7, #8]
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f000 f80e 	bl	80006f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80006d6:	69f8      	ldr	r0, [r7, #28]
 80006d8:	f000 f87c 	bl	80007d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80006dc:	2301      	movs	r3, #1
 80006de:	61bb      	str	r3, [r7, #24]
 80006e0:	e002      	b.n	80006e8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80006e8:	69bb      	ldr	r3, [r7, #24]
	}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3720      	adds	r7, #32
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	60f8      	str	r0, [r7, #12]
 80006fa:	60b9      	str	r1, [r7, #8]
 80006fc:	607a      	str	r2, [r7, #4]
 80006fe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800070a:	3b01      	subs	r3, #1
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4413      	add	r3, r2
 8000710:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	f023 0307 	bic.w	r3, r3, #7
 8000718:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d01f      	beq.n	8000760 <prvInitialiseNewTask+0x6e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	e012      	b.n	800074c <prvInitialiseNewTask+0x5a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	4413      	add	r3, r2
 800072c:	7819      	ldrb	r1, [r3, #0]
 800072e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	4413      	add	r3, r2
 8000734:	3334      	adds	r3, #52	; 0x34
 8000736:	460a      	mov	r2, r1
 8000738:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	4413      	add	r3, r2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d006      	beq.n	8000754 <prvInitialiseNewTask+0x62>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	3301      	adds	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	2b0f      	cmp	r3, #15
 8000750:	d9e9      	bls.n	8000726 <prvInitialiseNewTask+0x34>
 8000752:	e000      	b.n	8000756 <prvInitialiseNewTask+0x64>
			{
				break;
 8000754:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800075e:	e003      	b.n	8000768 <prvInitialiseNewTask+0x76>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	2b04      	cmp	r3, #4
 800076c:	d901      	bls.n	8000772 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800076e:	2304      	movs	r3, #4
 8000770:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000774:	6a3a      	ldr	r2, [r7, #32]
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800077a:	3304      	adds	r3, #4
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fee7 	bl	8000550 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000784:	3318      	adds	r3, #24
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fee2 	bl	8000550 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800078c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000790:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000792:	6a3b      	ldr	r3, [r7, #32]
 8000794:	f1c3 0205 	rsb	r2, r3, #5
 8000798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800079a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800079c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800079e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80007a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a4:	2200      	movs	r2, #0
 80007a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80007a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	68f9      	ldr	r1, [r7, #12]
 80007b4:	6938      	ldr	r0, [r7, #16]
 80007b6:	f000 fbaf 	bl	8000f18 <pxPortInitialiseStack>
 80007ba:	4602      	mov	r2, r0
 80007bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80007c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <prvInitialiseNewTask+0xda>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80007cc:	bf00      	nop
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80007dc:	f000 fc24 	bl	8001028 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <prvAddNewTaskToReadyList+0xb8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	4a29      	ldr	r2, [pc, #164]	; (800088c <prvAddNewTaskToReadyList+0xb8>)
 80007e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <prvAddNewTaskToReadyList+0xbc>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d109      	bne.n	8000806 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80007f2:	4a27      	ldr	r2, [pc, #156]	; (8000890 <prvAddNewTaskToReadyList+0xbc>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80007f8:	4b24      	ldr	r3, [pc, #144]	; (800088c <prvAddNewTaskToReadyList+0xb8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d110      	bne.n	8000822 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000800:	f000 fa88 	bl	8000d14 <prvInitialiseTaskLists>
 8000804:	e00d      	b.n	8000822 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000806:	4b23      	ldr	r3, [pc, #140]	; (8000894 <prvAddNewTaskToReadyList+0xc0>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d109      	bne.n	8000822 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <prvAddNewTaskToReadyList+0xbc>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000818:	429a      	cmp	r2, r3
 800081a:	d802      	bhi.n	8000822 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800081c:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <prvAddNewTaskToReadyList+0xbc>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000822:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <prvAddNewTaskToReadyList+0xc4>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	3301      	adds	r3, #1
 8000828:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <prvAddNewTaskToReadyList+0xc4>)
 800082a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000830:	2201      	movs	r2, #1
 8000832:	409a      	lsls	r2, r3
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <prvAddNewTaskToReadyList+0xc8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4313      	orrs	r3, r2
 800083a:	4a18      	ldr	r2, [pc, #96]	; (800089c <prvAddNewTaskToReadyList+0xc8>)
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000842:	4613      	mov	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <prvAddNewTaskToReadyList+0xcc>)
 800084c:	441a      	add	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	3304      	adds	r3, #4
 8000852:	4619      	mov	r1, r3
 8000854:	4610      	mov	r0, r2
 8000856:	f7ff fe87 	bl	8000568 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800085a:	f000 fbfd 	bl	8001058 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <prvAddNewTaskToReadyList+0xc0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d00e      	beq.n	8000884 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <prvAddNewTaskToReadyList+0xbc>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000870:	429a      	cmp	r2, r3
 8000872:	d207      	bcs.n	8000884 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <prvAddNewTaskToReadyList+0xd0>)
 8000876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	f3bf 8f4f 	dsb	sy
 8000880:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000108 	.word	0x20000108
 8000890:	20000030 	.word	0x20000030
 8000894:	20000114 	.word	0x20000114
 8000898:	20000124 	.word	0x20000124
 800089c:	20000110 	.word	0x20000110
 80008a0:	20000034 	.word	0x20000034
 80008a4:	e000ed04 	.word	0xe000ed04

080008a8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 80008b6:	f000 f87d 	bl	80009b4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <vTaskDelayUntil+0x98>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	683a      	ldr	r2, [r7, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d20b      	bcs.n	80008ec <vTaskDelayUntil+0x44>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d211      	bcs.n	8000902 <vTaskDelayUntil+0x5a>
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d90d      	bls.n	8000902 <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
 80008e6:	2301      	movs	r3, #1
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	e00a      	b.n	8000902 <vTaskDelayUntil+0x5a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d303      	bcc.n	80008fe <vTaskDelayUntil+0x56>
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d901      	bls.n	8000902 <vTaskDelayUntil+0x5a>
				{
					xShouldDelay = pdTRUE;
 80008fe:	2301      	movs	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d006      	beq.n	800091c <vTaskDelayUntil+0x74>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fa98 	bl	8000e4c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800091c:	f000 f858 	bl	80009d0 <xTaskResumeAll>
 8000920:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d107      	bne.n	8000938 <vTaskDelayUntil+0x90>
		{
			portYIELD_WITHIN_API();
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <vTaskDelayUntil+0x9c>)
 800092a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	f3bf 8f4f 	dsb	sy
 8000934:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000938:	bf00      	nop
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000010c 	.word	0x2000010c
 8000944:	e000ed04 	.word	0xe000ed04

08000948 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <vTaskStartScheduler+0x54>)
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	2300      	movs	r3, #0
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2300      	movs	r3, #0
 8000958:	2280      	movs	r2, #128	; 0x80
 800095a:	4911      	ldr	r1, [pc, #68]	; (80009a0 <vTaskStartScheduler+0x58>)
 800095c:	4811      	ldr	r0, [pc, #68]	; (80009a4 <vTaskStartScheduler+0x5c>)
 800095e:	f7ff fe87 	bl	8000670 <xTaskCreate>
 8000962:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d114      	bne.n	8000994 <vTaskStartScheduler+0x4c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800096a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800096e:	f383 8811 	msr	BASEPRI, r3
 8000972:	f3bf 8f6f 	isb	sy
 8000976:	f3bf 8f4f 	dsb	sy
 800097a:	603b      	str	r3, [r7, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <vTaskStartScheduler+0x60>)
 800097e:	f04f 32ff 	mov.w	r2, #4294967295
 8000982:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <vTaskStartScheduler+0x64>)
 8000986:	2201      	movs	r2, #1
 8000988:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <vTaskStartScheduler+0x68>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000990:	f000 fb2a 	bl	8000fe8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000012c 	.word	0x2000012c
 80009a0:	0800254c 	.word	0x0800254c
 80009a4:	08000ce5 	.word	0x08000ce5
 80009a8:	20000128 	.word	0x20000128
 80009ac:	20000114 	.word	0x20000114
 80009b0:	2000010c 	.word	0x2000010c

080009b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <vTaskSuspendAll+0x18>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	4a03      	ldr	r2, [pc, #12]	; (80009cc <vTaskSuspendAll+0x18>)
 80009c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000130 	.word	0x20000130

080009d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80009de:	f000 fb23 	bl	8001028 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80009e2:	4b39      	ldr	r3, [pc, #228]	; (8000ac8 <xTaskResumeAll+0xf8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	4a37      	ldr	r2, [pc, #220]	; (8000ac8 <xTaskResumeAll+0xf8>)
 80009ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80009ec:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <xTaskResumeAll+0xf8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d161      	bne.n	8000ab8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80009f4:	4b35      	ldr	r3, [pc, #212]	; (8000acc <xTaskResumeAll+0xfc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d05d      	beq.n	8000ab8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80009fc:	e02e      	b.n	8000a5c <xTaskResumeAll+0x8c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80009fe:	4b34      	ldr	r3, [pc, #208]	; (8000ad0 <xTaskResumeAll+0x100>)
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3318      	adds	r3, #24
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fe07 	bl	800061e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3304      	adds	r3, #4
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fe02 	bl	800061e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1e:	2201      	movs	r2, #1
 8000a20:	409a      	lsls	r2, r3
 8000a22:	4b2c      	ldr	r3, [pc, #176]	; (8000ad4 <xTaskResumeAll+0x104>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	4a2a      	ldr	r2, [pc, #168]	; (8000ad4 <xTaskResumeAll+0x104>)
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a30:	4613      	mov	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	4413      	add	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4a27      	ldr	r2, [pc, #156]	; (8000ad8 <xTaskResumeAll+0x108>)
 8000a3a:	441a      	add	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	3304      	adds	r3, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4610      	mov	r0, r2
 8000a44:	f7ff fd90 	bl	8000568 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <xTaskResumeAll+0x10c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d302      	bcc.n	8000a5c <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 8000a56:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <xTaskResumeAll+0x110>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <xTaskResumeAll+0x100>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1cc      	bne.n	80009fe <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000a6a:	f000 f9cf 	bl	8000e0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <xTaskResumeAll+0x114>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d010      	beq.n	8000a9c <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000a7a:	f000 f845 	bl	8000b08 <xTaskIncrementTick>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d002      	beq.n	8000a8a <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <xTaskResumeAll+0x110>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1f1      	bne.n	8000a7a <xTaskResumeAll+0xaa>

						xPendedTicks = 0;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <xTaskResumeAll+0x114>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <xTaskResumeAll+0x110>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d009      	beq.n	8000ab8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <xTaskResumeAll+0x118>)
 8000aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	f3bf 8f4f 	dsb	sy
 8000ab4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000ab8:	f000 face 	bl	8001058 <vPortExitCritical>

	return xAlreadyYielded;
 8000abc:	68bb      	ldr	r3, [r7, #8]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000130 	.word	0x20000130
 8000acc:	20000108 	.word	0x20000108
 8000ad0:	200000c8 	.word	0x200000c8
 8000ad4:	20000110 	.word	0x20000110
 8000ad8:	20000034 	.word	0x20000034
 8000adc:	20000030 	.word	0x20000030
 8000ae0:	2000011c 	.word	0x2000011c
 8000ae4:	20000118 	.word	0x20000118
 8000ae8:	e000ed04 	.word	0xe000ed04

08000aec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <xTaskGetTickCount+0x18>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	2000010c 	.word	0x2000010c

08000b08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b12:	4b46      	ldr	r3, [pc, #280]	; (8000c2c <xTaskIncrementTick+0x124>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d17d      	bne.n	8000c16 <xTaskIncrementTick+0x10e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000b1a:	4b45      	ldr	r3, [pc, #276]	; (8000c30 <xTaskIncrementTick+0x128>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000b22:	4a43      	ldr	r2, [pc, #268]	; (8000c30 <xTaskIncrementTick+0x128>)
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d110      	bne.n	8000b50 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8000b2e:	4b41      	ldr	r3, [pc, #260]	; (8000c34 <xTaskIncrementTick+0x12c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b40      	ldr	r3, [pc, #256]	; (8000c38 <xTaskIncrementTick+0x130>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a3e      	ldr	r2, [pc, #248]	; (8000c34 <xTaskIncrementTick+0x12c>)
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	4a3e      	ldr	r2, [pc, #248]	; (8000c38 <xTaskIncrementTick+0x130>)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	4b3e      	ldr	r3, [pc, #248]	; (8000c3c <xTaskIncrementTick+0x134>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	3301      	adds	r3, #1
 8000b48:	4a3c      	ldr	r2, [pc, #240]	; (8000c3c <xTaskIncrementTick+0x134>)
 8000b4a:	6013      	str	r3, [r2, #0]
 8000b4c:	f000 f95e 	bl	8000e0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000b50:	4b3b      	ldr	r3, [pc, #236]	; (8000c40 <xTaskIncrementTick+0x138>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d348      	bcc.n	8000bec <xTaskIncrementTick+0xe4>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000b5a:	4b36      	ldr	r3, [pc, #216]	; (8000c34 <xTaskIncrementTick+0x12c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d104      	bne.n	8000b6e <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b64:	4b36      	ldr	r3, [pc, #216]	; (8000c40 <xTaskIncrementTick+0x138>)
 8000b66:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6a:	601a      	str	r2, [r3, #0]
					break;
 8000b6c:	e03e      	b.n	8000bec <xTaskIncrementTick+0xe4>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b6e:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <xTaskIncrementTick+0x12c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d203      	bcs.n	8000b8e <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000b86:	4a2e      	ldr	r2, [pc, #184]	; (8000c40 <xTaskIncrementTick+0x138>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000b8c:	e02e      	b.n	8000bec <xTaskIncrementTick+0xe4>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	3304      	adds	r3, #4
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fd43 	bl	800061e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d004      	beq.n	8000baa <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	3318      	adds	r3, #24
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fd3a 	bl	800061e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bae:	2201      	movs	r2, #1
 8000bb0:	409a      	lsls	r2, r3
 8000bb2:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <xTaskIncrementTick+0x13c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	4a22      	ldr	r2, [pc, #136]	; (8000c44 <xTaskIncrementTick+0x13c>)
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <xTaskIncrementTick+0x140>)
 8000bca:	441a      	add	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	3304      	adds	r3, #4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	f7ff fcc8 	bl	8000568 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <xTaskIncrementTick+0x144>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d3b9      	bcc.n	8000b5a <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8000be6:	2301      	movs	r3, #1
 8000be8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000bea:	e7b6      	b.n	8000b5a <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <xTaskIncrementTick+0x144>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bf2:	4915      	ldr	r1, [pc, #84]	; (8000c48 <xTaskIncrementTick+0x140>)
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d901      	bls.n	8000c08 <xTaskIncrementTick+0x100>
			{
				xSwitchRequired = pdTRUE;
 8000c04:	2301      	movs	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <xTaskIncrementTick+0x148>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d007      	beq.n	8000c20 <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 8000c10:	2301      	movs	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	e004      	b.n	8000c20 <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <xTaskIncrementTick+0x14c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <xTaskIncrementTick+0x14c>)
 8000c1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8000c20:	697b      	ldr	r3, [r7, #20]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000130 	.word	0x20000130
 8000c30:	2000010c 	.word	0x2000010c
 8000c34:	200000c0 	.word	0x200000c0
 8000c38:	200000c4 	.word	0x200000c4
 8000c3c:	20000120 	.word	0x20000120
 8000c40:	20000128 	.word	0x20000128
 8000c44:	20000110 	.word	0x20000110
 8000c48:	20000034 	.word	0x20000034
 8000c4c:	20000030 	.word	0x20000030
 8000c50:	2000011c 	.word	0x2000011c
 8000c54:	20000118 	.word	0x20000118

08000c58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <vTaskSwitchContext+0x78>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <vTaskSwitchContext+0x7c>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000c6c:	e02a      	b.n	8000cc4 <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <vTaskSwitchContext+0x7c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <vTaskSwitchContext+0x80>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	fab3 f383 	clz	r3, r3
 8000c80:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8000c82:	78fb      	ldrb	r3, [r7, #3]
 8000c84:	f1c3 031f 	rsb	r3, r3, #31
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4a11      	ldr	r2, [pc, #68]	; (8000cdc <vTaskSwitchContext+0x84>)
 8000c96:	4413      	add	r3, r2
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	3308      	adds	r3, #8
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d104      	bne.n	8000cba <vTaskSwitchContext+0x62>
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <vTaskSwitchContext+0x88>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000130 	.word	0x20000130
 8000cd4:	2000011c 	.word	0x2000011c
 8000cd8:	20000110 	.word	0x20000110
 8000cdc:	20000034 	.word	0x20000034
 8000ce0:	20000030 	.word	0x20000030

08000ce4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8000cec:	f000 f852 	bl	8000d94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <prvIdleTask+0x28>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d9f9      	bls.n	8000cec <prvIdleTask+0x8>
			{
				taskYIELD();
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <prvIdleTask+0x2c>)
 8000cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	f3bf 8f4f 	dsb	sy
 8000d04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8000d08:	e7f0      	b.n	8000cec <prvIdleTask+0x8>
 8000d0a:	bf00      	nop
 8000d0c:	20000034 	.word	0x20000034
 8000d10:	e000ed04 	.word	0xe000ed04

08000d14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	e00c      	b.n	8000d3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4613      	mov	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <prvInitialiseTaskLists+0x60>)
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fbef 	bl	8000512 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3301      	adds	r3, #1
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b04      	cmp	r3, #4
 8000d3e:	d9ef      	bls.n	8000d20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <prvInitialiseTaskLists+0x64>)
 8000d42:	f7ff fbe6 	bl	8000512 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <prvInitialiseTaskLists+0x68>)
 8000d48:	f7ff fbe3 	bl	8000512 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <prvInitialiseTaskLists+0x6c>)
 8000d4e:	f7ff fbe0 	bl	8000512 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8000d52:	480c      	ldr	r0, [pc, #48]	; (8000d84 <prvInitialiseTaskLists+0x70>)
 8000d54:	f7ff fbdd 	bl	8000512 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8000d58:	480b      	ldr	r0, [pc, #44]	; (8000d88 <prvInitialiseTaskLists+0x74>)
 8000d5a:	f7ff fbda 	bl	8000512 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <prvInitialiseTaskLists+0x78>)
 8000d60:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <prvInitialiseTaskLists+0x64>)
 8000d62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <prvInitialiseTaskLists+0x7c>)
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <prvInitialiseTaskLists+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000034 	.word	0x20000034
 8000d78:	20000098 	.word	0x20000098
 8000d7c:	200000ac 	.word	0x200000ac
 8000d80:	200000c8 	.word	0x200000c8
 8000d84:	200000dc 	.word	0x200000dc
 8000d88:	200000f4 	.word	0x200000f4
 8000d8c:	200000c0 	.word	0x200000c0
 8000d90:	200000c4 	.word	0x200000c4

08000d94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000d9a:	e019      	b.n	8000dd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8000d9c:	f000 f944 	bl	8001028 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <prvCheckTasksWaitingTermination+0x4c>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3304      	adds	r3, #4
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fc36 	bl	800061e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <prvCheckTasksWaitingTermination+0x50>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <prvCheckTasksWaitingTermination+0x50>)
 8000dba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <prvCheckTasksWaitingTermination+0x54>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	4a09      	ldr	r2, [pc, #36]	; (8000de8 <prvCheckTasksWaitingTermination+0x54>)
 8000dc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8000dc6:	f000 f947 	bl	8001058 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f80e 	bl	8000dec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <prvCheckTasksWaitingTermination+0x54>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1e1      	bne.n	8000d9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200000dc 	.word	0x200000dc
 8000de4:	20000108 	.word	0x20000108
 8000de8:	200000f0 	.word	0x200000f0

08000dec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fa3d 	bl	8001278 <vPortFree>
			vPortFree( pxTCB );
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 fa3a 	bl	8001278 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <prvResetNextTaskUnblockTime+0x38>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d104      	bne.n	8000e26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <prvResetNextTaskUnblockTime+0x3c>)
 8000e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8000e24:	e008      	b.n	8000e38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <prvResetNextTaskUnblockTime+0x38>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <prvResetNextTaskUnblockTime+0x3c>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	200000c0 	.word	0x200000c0
 8000e48:	20000128 	.word	0x20000128

08000e4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8000e56:	4b29      	ldr	r3, [pc, #164]	; (8000efc <prvAddCurrentTaskToDelayedList+0xb0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	3304      	adds	r3, #4
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fbdb 	bl	800061e <uxListRemove>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10b      	bne.n	8000e86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e74:	2201      	movs	r2, #1
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4013      	ands	r3, r2
 8000e82:	4a20      	ldr	r2, [pc, #128]	; (8000f04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8000e84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e8c:	d10a      	bne.n	8000ea4 <prvAddCurrentTaskToDelayedList+0x58>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d007      	beq.n	8000ea4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481a      	ldr	r0, [pc, #104]	; (8000f08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8000e9e:	f7ff fb63 	bl	8000568 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8000ea2:	e026      	b.n	8000ef2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68ba      	ldr	r2, [r7, #8]
 8000eb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d209      	bcs.n	8000ed0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4610      	mov	r0, r2
 8000eca:	f7ff fb70 	bl	80005ae <vListInsert>
}
 8000ece:	e010      	b.n	8000ef2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	4619      	mov	r1, r3
 8000edc:	4610      	mov	r0, r2
 8000ede:	f7ff fb66 	bl	80005ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d202      	bcs.n	8000ef2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8000eec:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	6013      	str	r3, [r2, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000010c 	.word	0x2000010c
 8000f00:	20000030 	.word	0x20000030
 8000f04:	20000110 	.word	0x20000110
 8000f08:	200000f4 	.word	0x200000f4
 8000f0c:	200000c4 	.word	0x200000c4
 8000f10:	200000c0 	.word	0x200000c0
 8000f14:	20000128 	.word	0x20000128

08000f18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3b04      	subs	r3, #4
 8000f28:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3b04      	subs	r3, #4
 8000f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	f023 0201 	bic.w	r2, r3, #1
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	3b04      	subs	r3, #4
 8000f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000f48:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <pxPortInitialiseStack+0x54>)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3b14      	subs	r3, #20
 8000f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	3b20      	subs	r3, #32
 8000f5e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000f60:	68fb      	ldr	r3, [r7, #12]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	08000f71 	.word	0x08000f71

08000f70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000f7a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000f7e:	f383 8811 	msr	BASEPRI, r3
 8000f82:	f3bf 8f6f 	isb	sy
 8000f86:	f3bf 8f4f 	dsb	sy
 8000f8a:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000f8c:	bf00      	nop
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d0fc      	beq.n	8000f8e <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
	...

08000fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <pxCurrentTCBConst2>)
 8000fa2:	6819      	ldr	r1, [r3, #0]
 8000fa4:	6808      	ldr	r0, [r1, #0]
 8000fa6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000faa:	f380 8809 	msr	PSP, r0
 8000fae:	f3bf 8f6f 	isb	sy
 8000fb2:	f04f 0000 	mov.w	r0, #0
 8000fb6:	f380 8811 	msr	BASEPRI, r0
 8000fba:	f04e 0e0d 	orr.w	lr, lr, #13
 8000fbe:	4770      	bx	lr

08000fc0 <pxCurrentTCBConst2>:
 8000fc0:	20000030 	.word	0x20000030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop

08000fc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000fc8:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <prvPortStartFirstTask+0x1c>)
 8000fca:	6800      	ldr	r0, [r0, #0]
 8000fcc:	6800      	ldr	r0, [r0, #0]
 8000fce:	f380 8808 	msr	MSP, r0
 8000fd2:	b662      	cpsie	i
 8000fd4:	b661      	cpsie	f
 8000fd6:	f3bf 8f4f 	dsb	sy
 8000fda:	f3bf 8f6f 	isb	sy
 8000fde:	df00      	svc	0
 8000fe0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000fe2:	bf00      	nop
 8000fe4:	e000ed08 	.word	0xe000ed08

08000fe8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <xPortStartScheduler+0x38>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <xPortStartScheduler+0x38>)
 8000ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000ff6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <xPortStartScheduler+0x38>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a08      	ldr	r2, [pc, #32]	; (8001020 <xPortStartScheduler+0x38>)
 8000ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001002:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001004:	f000 f888 	bl	8001118 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <xPortStartScheduler+0x3c>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800100e:	f7ff ffdb 	bl	8000fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001012:	f7ff fe21 	bl	8000c58 <vTaskSwitchContext>
	prvTaskExitError();
 8001016:	f7ff ffab 	bl	8000f70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	bd80      	pop	{r7, pc}
 8001020:	e000ed20 	.word	0xe000ed20
 8001024:	20000004 	.word	0x20000004

08001028 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001032:	f383 8811 	msr	BASEPRI, r3
 8001036:	f3bf 8f6f 	isb	sy
 800103a:	f3bf 8f4f 	dsb	sy
 800103e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <vPortEnterCritical+0x2c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	4a03      	ldr	r2, [pc, #12]	; (8001054 <vPortEnterCritical+0x2c>)
 8001048:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	20000004 	.word	0x20000004

08001058 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <vPortExitCritical+0x2c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3b01      	subs	r3, #1
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <vPortExitCritical+0x2c>)
 8001066:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <vPortExitCritical+0x2c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d104      	bne.n	800107a <vPortExitCritical+0x22>
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	20000004 	.word	0x20000004
	...

08001090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001090:	f3ef 8009 	mrs	r0, PSP
 8001094:	f3bf 8f6f 	isb	sy
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <pxCurrentTCBConst>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80010a0:	6010      	str	r0, [r2, #0]
 80010a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80010a6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80010aa:	f380 8811 	msr	BASEPRI, r0
 80010ae:	f7ff fdd3 	bl	8000c58 <vTaskSwitchContext>
 80010b2:	f04f 0000 	mov.w	r0, #0
 80010b6:	f380 8811 	msr	BASEPRI, r0
 80010ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80010be:	6819      	ldr	r1, [r3, #0]
 80010c0:	6808      	ldr	r0, [r1, #0]
 80010c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80010c6:	f380 8809 	msr	PSP, r0
 80010ca:	f3bf 8f6f 	isb	sy
 80010ce:	4770      	bx	lr

080010d0 <pxCurrentTCBConst>:
 80010d0:	20000030 	.word	0x20000030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop

080010d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
	__asm volatile
 80010de:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80010e2:	f383 8811 	msr	BASEPRI, r3
 80010e6:	f3bf 8f6f 	isb	sy
 80010ea:	f3bf 8f4f 	dsb	sy
 80010ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80010f0:	f7ff fd0a 	bl	8000b08 <xTaskIncrementTick>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SysTick_Handler+0x3c>)
 80010fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	e000ed04 	.word	0xe000ed04

08001118 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <vPortSetupTimerInterrupt+0x30>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <vPortSetupTimerInterrupt+0x34>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <vPortSetupTimerInterrupt+0x38>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a09      	ldr	r2, [pc, #36]	; (8001154 <vPortSetupTimerInterrupt+0x3c>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	4a08      	ldr	r2, [pc, #32]	; (8001158 <vPortSetupTimerInterrupt+0x40>)
 8001136:	3b01      	subs	r3, #1
 8001138:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800113a:	4b03      	ldr	r3, [pc, #12]	; (8001148 <vPortSetupTimerInterrupt+0x30>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	e000e010 	.word	0xe000e010
 800114c:	e000e018 	.word	0xe000e018
 8001150:	20000000 	.word	0x20000000
 8001154:	10624dd3 	.word	0x10624dd3
 8001158:	e000e014 	.word	0xe000e014

0800115c <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 8001168:	f7ff fc24 	bl	80009b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 800116c:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <pvPortMalloc+0x10c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d104      	bne.n	800117e <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8001174:	f000 f8ba 	bl	80012ec <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8001178:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <pvPortMalloc+0x10c>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00e      	beq.n	80011a2 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8001184:	2308      	movs	r3, #8
 8001186:	461a      	mov	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	2b00      	cmp	r3, #0
 8001196:	d004      	beq.n	80011a2 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f023 0307 	bic.w	r3, r3, #7
 800119e:	3308      	adds	r3, #8
 80011a0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d057      	beq.n	8001258 <pvPortMalloc+0xfc>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f641 72f7 	movw	r2, #8183	; 0x1ff7
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d852      	bhi.n	8001258 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <pvPortMalloc+0x110>)
 80011b4:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <pvPortMalloc+0x110>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80011bc:	e004      	b.n	80011c8 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d903      	bls.n	80011da <pvPortMalloc+0x7e>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f1      	bne.n	80011be <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	4a24      	ldr	r2, [pc, #144]	; (8001270 <pvPortMalloc+0x114>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d03a      	beq.n	8001258 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2208      	movs	r2, #8
 80011e8:	4413      	add	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2208      	movs	r2, #8
 80011fe:	0052      	lsls	r2, r2, #1
 8001200:	4293      	cmp	r3, r2
 8001202:	d922      	bls.n	800124a <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	1ad2      	subs	r2, r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <pvPortMalloc+0x110>)
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	e002      	b.n	8001230 <pvPortMalloc+0xd4>
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	429a      	cmp	r2, r3
 800123a:	d8f6      	bhi.n	800122a <pvPortMalloc+0xce>
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <pvPortMalloc+0x118>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	4a07      	ldr	r2, [pc, #28]	; (8001274 <pvPortMalloc+0x118>)
 8001256:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001258:	f7ff fbba 	bl	80009d0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800125c:	697b      	ldr	r3, [r7, #20]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20002144 	.word	0x20002144
 800126c:	20002134 	.word	0x20002134
 8001270:	2000213c 	.word	0x2000213c
 8001274:	20000008 	.word	0x20000008

08001278 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d027      	beq.n	80012da <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800128a:	2308      	movs	r3, #8
 800128c:	425b      	negs	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4413      	add	r3, r2
 8001292:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8001298:	f7ff fb8c 	bl	80009b4 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <vPortFree+0x6c>)
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	e002      	b.n	80012ae <vPortFree+0x36>
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d8f6      	bhi.n	80012a8 <vPortFree+0x30>
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <vPortFree+0x70>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <vPortFree+0x70>)
 80012d4:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 80012d6:	f7ff fb7b 	bl	80009d0 <xTaskResumeAll>
	}
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20002134 	.word	0x20002134
 80012e8:	20000008 	.word	0x20000008

080012ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <prvHeapInit+0x44>)
 80012f4:	f023 0307 	bic.w	r3, r3, #7
 80012f8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <prvHeapInit+0x48>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <prvHeapInit+0x48>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <prvHeapInit+0x4c>)
 8001308:	f641 72f8 	movw	r2, #8184	; 0x1ff8
 800130c:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <prvHeapInit+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f641 72f8 	movw	r2, #8184	; 0x1ff8
 800131e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <prvHeapInit+0x4c>)
 8001324:	601a      	str	r2, [r3, #0]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	2000013c 	.word	0x2000013c
 8001334:	20002134 	.word	0x20002134
 8001338:	2000213c 	.word	0x2000213c

0800133c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_Init+0x28>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_Init+0x28>)
 8001346:	f043 0310 	orr.w	r3, r3, #16
 800134a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134c:	2003      	movs	r0, #3
 800134e:	f000 f8d1 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff f80c 	bl	8000370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001358:	f7fe ffd8 	bl	800030c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40022000 	.word	0x40022000

08001368 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_IncTick+0x1c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_IncTick+0x20>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a03      	ldr	r2, [pc, #12]	; (8001388 <HAL_IncTick+0x20>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	20000010 	.word	0x20000010
 8001388:	2000218c 	.word	0x2000218c

0800138c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;
 8001390:	4b02      	ldr	r3, [pc, #8]	; (800139c <HAL_GetTick+0x10>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	2000218c 	.word	0x2000218c

080013a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013bc:	4013      	ands	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	60d3      	str	r3, [r2, #12]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <__NVIC_GetPriorityGrouping+0x18>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	0a1b      	lsrs	r3, r3, #8
 80013f2:	f003 0307 	and.w	r3, r3, #7
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	db0b      	blt.n	800142e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f003 021f 	and.w	r2, r3, #31
 800141c:	4906      	ldr	r1, [pc, #24]	; (8001438 <__NVIC_EnableIRQ+0x34>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	2001      	movs	r0, #1
 8001426:	fa00 f202 	lsl.w	r2, r0, r2
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff4f 	bl	80013a0 <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff64 	bl	80013e8 <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ffb2 	bl	8001490 <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff81 	bl	800143c <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff57 	bl	8001404 <__NVIC_EnableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b08b      	sub	sp, #44	; 0x2c
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001572:	e127      	b.n	80017c4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001574:	2201      	movs	r2, #1
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	69fa      	ldr	r2, [r7, #28]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	429a      	cmp	r2, r3
 800158e:	f040 8116 	bne.w	80017be <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b12      	cmp	r3, #18
 8001598:	d034      	beq.n	8001604 <HAL_GPIO_Init+0xa4>
 800159a:	2b12      	cmp	r3, #18
 800159c:	d80d      	bhi.n	80015ba <HAL_GPIO_Init+0x5a>
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d02b      	beq.n	80015fa <HAL_GPIO_Init+0x9a>
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d804      	bhi.n	80015b0 <HAL_GPIO_Init+0x50>
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d031      	beq.n	800160e <HAL_GPIO_Init+0xae>
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d01c      	beq.n	80015e8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ae:	e048      	b.n	8001642 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d043      	beq.n	800163c <HAL_GPIO_Init+0xdc>
 80015b4:	2b11      	cmp	r3, #17
 80015b6:	d01b      	beq.n	80015f0 <HAL_GPIO_Init+0x90>
          break;
 80015b8:	e043      	b.n	8001642 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015ba:	4a89      	ldr	r2, [pc, #548]	; (80017e0 <HAL_GPIO_Init+0x280>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d026      	beq.n	800160e <HAL_GPIO_Init+0xae>
 80015c0:	4a87      	ldr	r2, [pc, #540]	; (80017e0 <HAL_GPIO_Init+0x280>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d806      	bhi.n	80015d4 <HAL_GPIO_Init+0x74>
 80015c6:	4a87      	ldr	r2, [pc, #540]	; (80017e4 <HAL_GPIO_Init+0x284>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d020      	beq.n	800160e <HAL_GPIO_Init+0xae>
 80015cc:	4a86      	ldr	r2, [pc, #536]	; (80017e8 <HAL_GPIO_Init+0x288>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d01d      	beq.n	800160e <HAL_GPIO_Init+0xae>
          break;
 80015d2:	e036      	b.n	8001642 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015d4:	4a85      	ldr	r2, [pc, #532]	; (80017ec <HAL_GPIO_Init+0x28c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d019      	beq.n	800160e <HAL_GPIO_Init+0xae>
 80015da:	4a85      	ldr	r2, [pc, #532]	; (80017f0 <HAL_GPIO_Init+0x290>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d016      	beq.n	800160e <HAL_GPIO_Init+0xae>
 80015e0:	4a84      	ldr	r2, [pc, #528]	; (80017f4 <HAL_GPIO_Init+0x294>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0xae>
          break;
 80015e6:	e02c      	b.n	8001642 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	623b      	str	r3, [r7, #32]
          break;
 80015ee:	e028      	b.n	8001642 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	3304      	adds	r3, #4
 80015f6:	623b      	str	r3, [r7, #32]
          break;
 80015f8:	e023      	b.n	8001642 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	3308      	adds	r3, #8
 8001600:	623b      	str	r3, [r7, #32]
          break;
 8001602:	e01e      	b.n	8001642 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	330c      	adds	r3, #12
 800160a:	623b      	str	r3, [r7, #32]
          break;
 800160c:	e019      	b.n	8001642 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001616:	2304      	movs	r3, #4
 8001618:	623b      	str	r3, [r7, #32]
          break;
 800161a:	e012      	b.n	8001642 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d105      	bne.n	8001630 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001624:	2308      	movs	r3, #8
 8001626:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	611a      	str	r2, [r3, #16]
          break;
 800162e:	e008      	b.n	8001642 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001630:	2308      	movs	r3, #8
 8001632:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	615a      	str	r2, [r3, #20]
          break;
 800163a:	e002      	b.n	8001642 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
          break;
 8001640:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2bff      	cmp	r3, #255	; 0xff
 8001646:	d801      	bhi.n	800164c <HAL_GPIO_Init+0xec>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	e001      	b.n	8001650 <HAL_GPIO_Init+0xf0>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3304      	adds	r3, #4
 8001650:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2bff      	cmp	r3, #255	; 0xff
 8001656:	d802      	bhi.n	800165e <HAL_GPIO_Init+0xfe>
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	e002      	b.n	8001664 <HAL_GPIO_Init+0x104>
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	3b08      	subs	r3, #8
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	210f      	movs	r1, #15
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	401a      	ands	r2, r3
 8001676:	6a39      	ldr	r1, [r7, #32]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	431a      	orrs	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 8096 	beq.w	80017be <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001692:	4b59      	ldr	r3, [pc, #356]	; (80017f8 <HAL_GPIO_Init+0x298>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	4a58      	ldr	r2, [pc, #352]	; (80017f8 <HAL_GPIO_Init+0x298>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6193      	str	r3, [r2, #24]
 800169e:	4b56      	ldr	r3, [pc, #344]	; (80017f8 <HAL_GPIO_Init+0x298>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016aa:	4a54      	ldr	r2, [pc, #336]	; (80017fc <HAL_GPIO_Init+0x29c>)
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4013      	ands	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4b      	ldr	r2, [pc, #300]	; (8001800 <HAL_GPIO_Init+0x2a0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_GPIO_Init+0x19e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4a      	ldr	r2, [pc, #296]	; (8001804 <HAL_GPIO_Init+0x2a4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d00d      	beq.n	80016fa <HAL_GPIO_Init+0x19a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a49      	ldr	r2, [pc, #292]	; (8001808 <HAL_GPIO_Init+0x2a8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d007      	beq.n	80016f6 <HAL_GPIO_Init+0x196>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a48      	ldr	r2, [pc, #288]	; (800180c <HAL_GPIO_Init+0x2ac>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_GPIO_Init+0x192>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x1a0>
 80016f2:	2304      	movs	r3, #4
 80016f4:	e004      	b.n	8001700 <HAL_GPIO_Init+0x1a0>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e002      	b.n	8001700 <HAL_GPIO_Init+0x1a0>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_GPIO_Init+0x1a0>
 80016fe:	2300      	movs	r3, #0
 8001700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001702:	f002 0203 	and.w	r2, r2, #3
 8001706:	0092      	lsls	r2, r2, #2
 8001708:	4093      	lsls	r3, r2
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001710:	493a      	ldr	r1, [pc, #232]	; (80017fc <HAL_GPIO_Init+0x29c>)
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800172a:	4b39      	ldr	r3, [pc, #228]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4938      	ldr	r1, [pc, #224]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
 8001736:	e006      	b.n	8001746 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001738:	4b35      	ldr	r3, [pc, #212]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	43db      	mvns	r3, r3
 8001740:	4933      	ldr	r1, [pc, #204]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 8001742:	4013      	ands	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001752:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	492e      	ldr	r1, [pc, #184]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	604b      	str	r3, [r1, #4]
 800175e:	e006      	b.n	800176e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001760:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	43db      	mvns	r3, r3
 8001768:	4929      	ldr	r1, [pc, #164]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 800176a:	4013      	ands	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800177a:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	4924      	ldr	r1, [pc, #144]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
 8001786:	e006      	b.n	8001796 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001788:	4b21      	ldr	r3, [pc, #132]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	43db      	mvns	r3, r3
 8001790:	491f      	ldr	r1, [pc, #124]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 8001792:	4013      	ands	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d006      	beq.n	80017b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	491a      	ldr	r1, [pc, #104]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60cb      	str	r3, [r1, #12]
 80017ae:	e006      	b.n	80017be <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	4915      	ldr	r1, [pc, #84]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	3301      	adds	r3, #1
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f47f aed0 	bne.w	8001574 <HAL_GPIO_Init+0x14>
  }
}
 80017d4:	bf00      	nop
 80017d6:	372c      	adds	r7, #44	; 0x2c
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	10210000 	.word	0x10210000
 80017e4:	10110000 	.word	0x10110000
 80017e8:	10120000 	.word	0x10120000
 80017ec:	10310000 	.word	0x10310000
 80017f0:	10320000 	.word	0x10320000
 80017f4:	10220000 	.word	0x10220000
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010000 	.word	0x40010000
 8001800:	40010800 	.word	0x40010800
 8001804:	40010c00 	.word	0x40010c00
 8001808:	40011000 	.word	0x40011000
 800180c:	40011400 	.word	0x40011400
 8001810:	40010400 	.word	0x40010400

08001814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
 8001820:	4613      	mov	r3, r2
 8001822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001824:	787b      	ldrb	r3, [r7, #1]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001830:	e003      	b.n	800183a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	041a      	lsls	r2, r3, #16
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	611a      	str	r2, [r3, #16]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800185c:	887a      	ldrh	r2, [r7, #2]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001862:	e002      	b.n	800186a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001864:	887a      	ldrh	r2, [r7, #2]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	611a      	str	r2, [r3, #16]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e26c      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 8087 	beq.w	80019a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001894:	4b92      	ldr	r3, [pc, #584]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b04      	cmp	r3, #4
 800189e:	d00c      	beq.n	80018ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018a0:	4b8f      	ldr	r3, [pc, #572]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d112      	bne.n	80018d2 <HAL_RCC_OscConfig+0x5e>
 80018ac:	4b8c      	ldr	r3, [pc, #560]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b8:	d10b      	bne.n	80018d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ba:	4b89      	ldr	r3, [pc, #548]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d06c      	beq.n	80019a0 <HAL_RCC_OscConfig+0x12c>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d168      	bne.n	80019a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e246      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x76>
 80018dc:	4b80      	ldr	r3, [pc, #512]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a7f      	ldr	r2, [pc, #508]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	e02e      	b.n	8001948 <HAL_RCC_OscConfig+0xd4>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0x98>
 80018f2:	4b7b      	ldr	r3, [pc, #492]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a7a      	ldr	r2, [pc, #488]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b78      	ldr	r3, [pc, #480]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a77      	ldr	r2, [pc, #476]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e01d      	b.n	8001948 <HAL_RCC_OscConfig+0xd4>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0xbc>
 8001916:	4b72      	ldr	r3, [pc, #456]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a71      	ldr	r2, [pc, #452]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 800191c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b6f      	ldr	r3, [pc, #444]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a6e      	ldr	r2, [pc, #440]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0xd4>
 8001930:	4b6b      	ldr	r3, [pc, #428]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a6a      	ldr	r2, [pc, #424]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b68      	ldr	r3, [pc, #416]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a67      	ldr	r2, [pc, #412]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001946:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff fd1c 	bl	800138c <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff fd18 	bl	800138c <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e1fa      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0xe4>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fd08 	bl	800138c <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff fd04 	bl	800138c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e1e6      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x10c>
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d063      	beq.n	8001a76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ae:	4b4c      	ldr	r3, [pc, #304]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ba:	4b49      	ldr	r3, [pc, #292]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d11c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x18c>
 80019c6:	4b46      	ldr	r3, [pc, #280]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d116      	bne.n	8001a00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <HAL_RCC_OscConfig+0x176>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e1ba      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ea:	4b3d      	ldr	r3, [pc, #244]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4939      	ldr	r1, [pc, #228]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	e03a      	b.n	8001a76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d020      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fcbd 	bl	800138c <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a16:	f7ff fcb9 	bl	800138c <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e19b      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4927      	ldr	r1, [pc, #156]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e015      	b.n	8001a76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fc9c 	bl	800138c <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff fc98 	bl	800138c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e17a      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d03a      	beq.n	8001af8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d019      	beq.n	8001abe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8a:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a90:	f7ff fc7c 	bl	800138c <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff fc78 	bl	800138c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e15a      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f000 faf6 	bl	80020a8 <RCC_Delay>
 8001abc:	e01c      	b.n	8001af8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fc62 	bl	800138c <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aca:	e00f      	b.n	8001aec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001acc:	f7ff fc5e 	bl	800138c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d908      	bls.n	8001aec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e140      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	42420000 	.word	0x42420000
 8001ae8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	4b9e      	ldr	r3, [pc, #632]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1e9      	bne.n	8001acc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80a6 	beq.w	8001c52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0a:	4b97      	ldr	r3, [pc, #604]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10d      	bne.n	8001b32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4b94      	ldr	r3, [pc, #592]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a93      	ldr	r2, [pc, #588]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]
 8001b22:	4b91      	ldr	r3, [pc, #580]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b32:	4b8e      	ldr	r3, [pc, #568]	; (8001d6c <HAL_RCC_OscConfig+0x4f8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d118      	bne.n	8001b70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3e:	4b8b      	ldr	r3, [pc, #556]	; (8001d6c <HAL_RCC_OscConfig+0x4f8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a8a      	ldr	r2, [pc, #552]	; (8001d6c <HAL_RCC_OscConfig+0x4f8>)
 8001b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fc1f 	bl	800138c <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b52:	f7ff fc1b 	bl	800138c <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b64      	cmp	r3, #100	; 0x64
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e0fd      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b64:	4b81      	ldr	r3, [pc, #516]	; (8001d6c <HAL_RCC_OscConfig+0x4f8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x312>
 8001b78:	4b7b      	ldr	r3, [pc, #492]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4a7a      	ldr	r2, [pc, #488]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6213      	str	r3, [r2, #32]
 8001b84:	e02d      	b.n	8001be2 <HAL_RCC_OscConfig+0x36e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x334>
 8001b8e:	4b76      	ldr	r3, [pc, #472]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a75      	ldr	r2, [pc, #468]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	6213      	str	r3, [r2, #32]
 8001b9a:	4b73      	ldr	r3, [pc, #460]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	4a72      	ldr	r2, [pc, #456]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	f023 0304 	bic.w	r3, r3, #4
 8001ba4:	6213      	str	r3, [r2, #32]
 8001ba6:	e01c      	b.n	8001be2 <HAL_RCC_OscConfig+0x36e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	d10c      	bne.n	8001bca <HAL_RCC_OscConfig+0x356>
 8001bb0:	4b6d      	ldr	r3, [pc, #436]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	4a6c      	ldr	r2, [pc, #432]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	6213      	str	r3, [r2, #32]
 8001bbc:	4b6a      	ldr	r3, [pc, #424]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4a69      	ldr	r2, [pc, #420]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6213      	str	r3, [r2, #32]
 8001bc8:	e00b      	b.n	8001be2 <HAL_RCC_OscConfig+0x36e>
 8001bca:	4b67      	ldr	r3, [pc, #412]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4a66      	ldr	r2, [pc, #408]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	6213      	str	r3, [r2, #32]
 8001bd6:	4b64      	ldr	r3, [pc, #400]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4a63      	ldr	r2, [pc, #396]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	f023 0304 	bic.w	r3, r3, #4
 8001be0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d015      	beq.n	8001c16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bea:	f7ff fbcf 	bl	800138c <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf0:	e00a      	b.n	8001c08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff fbcb 	bl	800138c <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e0ab      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	4b57      	ldr	r3, [pc, #348]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0ee      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x37e>
 8001c14:	e014      	b.n	8001c40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c16:	f7ff fbb9 	bl	800138c <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c1c:	e00a      	b.n	8001c34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1e:	f7ff fbb5 	bl	800138c <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e095      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c34:	4b4c      	ldr	r3, [pc, #304]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1ee      	bne.n	8001c1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d105      	bne.n	8001c52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c46:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4a47      	ldr	r2, [pc, #284]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8081 	beq.w	8001d5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c5c:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d061      	beq.n	8001d2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d146      	bne.n	8001cfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c70:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <HAL_RCC_OscConfig+0x4fc>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff fb89 	bl	800138c <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff fb85 	bl	800138c <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e067      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c90:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca4:	d108      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ca6:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	492d      	ldr	r1, [pc, #180]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a19      	ldr	r1, [r3, #32]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	4927      	ldr	r1, [pc, #156]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd0:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_RCC_OscConfig+0x4fc>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fb59 	bl	800138c <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cde:	f7ff fb55 	bl	800138c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e037      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x46a>
 8001cfc:	e02f      	b.n	8001d5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_RCC_OscConfig+0x4fc>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff fb42 	bl	800138c <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7ff fb3e 	bl	800138c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e020      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x498>
 8001d2a:	e018      	b.n	8001d5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e013      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	42420060 	.word	0x42420060

08001d74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0d0      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d88:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d910      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b67      	ldr	r3, [pc, #412]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 0207 	bic.w	r2, r3, #7
 8001d9e:	4965      	ldr	r1, [pc, #404]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0b8      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd0:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a58      	ldr	r2, [pc, #352]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de8:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a52      	ldr	r2, [pc, #328]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001df2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df4:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	494d      	ldr	r1, [pc, #308]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d040      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d115      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e07f      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e32:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e073      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e42:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e06b      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e52:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f023 0203 	bic.w	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4936      	ldr	r1, [pc, #216]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e64:	f7ff fa92 	bl	800138c <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6c:	f7ff fa8e 	bl	800138c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e053      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 020c 	and.w	r2, r3, #12
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1eb      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d210      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 0207 	bic.w	r2, r3, #7
 8001eaa:	4922      	ldr	r1, [pc, #136]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e032      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4916      	ldr	r1, [pc, #88]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	490e      	ldr	r1, [pc, #56]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f02:	f000 f821 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001f06:	4601      	mov	r1, r0
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	5cd3      	ldrb	r3, [r2, r3]
 8001f16:	fa21 f303 	lsr.w	r3, r1, r3
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_RCC_ClockConfig+0x1cc>)
 8001f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_ClockConfig+0x1d0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fa24 	bl	8000370 <HAL_InitTick>

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40022000 	.word	0x40022000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08002568 	.word	0x08002568
 8001f40:	20000000 	.word	0x20000000
 8001f44:	2000000c 	.word	0x2000000c

08001f48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	b490      	push	{r4, r7}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f50:	1d3c      	adds	r4, r7, #4
 8001f52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f58:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f72:	4b23      	ldr	r3, [pc, #140]	; (8002000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d002      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x40>
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_GetSysClockFreq+0x46>
 8001f86:	e02d      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f88:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f8a:	623b      	str	r3, [r7, #32]
      break;
 8001f8c:	e02d      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	0c9b      	lsrs	r3, r3, #18
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fa0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d013      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	0c5b      	lsrs	r3, r3, #17
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fba:	4413      	add	r3, r2
 8001fbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fc0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	4a0f      	ldr	r2, [pc, #60]	; (8002004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fc6:	fb02 f203 	mul.w	r2, r2, r3
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd2:	e004      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fd8:	fb02 f303 	mul.w	r3, r2, r3
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	623b      	str	r3, [r7, #32]
      break;
 8001fe2:	e002      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fe6:	623b      	str	r3, [r7, #32]
      break;
 8001fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fea:	6a3b      	ldr	r3, [r7, #32]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3728      	adds	r7, #40	; 0x28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc90      	pop	{r4, r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	08002554 	.word	0x08002554
 8001ffc:	08002564 	.word	0x08002564
 8002000:	40021000 	.word	0x40021000
 8002004:	007a1200 	.word	0x007a1200
 8002008:	003d0900 	.word	0x003d0900

0800200c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002010:	4b02      	ldr	r3, [pc, #8]	; (800201c <HAL_RCC_GetHCLKFreq+0x10>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	20000000 	.word	0x20000000

08002020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002024:	f7ff fff2 	bl	800200c <HAL_RCC_GetHCLKFreq>
 8002028:	4601      	mov	r1, r0
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	0adb      	lsrs	r3, r3, #11
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	4a03      	ldr	r2, [pc, #12]	; (8002044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002036:	5cd3      	ldrb	r3, [r2, r3]
 8002038:	fa21 f303 	lsr.w	r3, r1, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	08002578 	.word	0x08002578

08002048 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	220f      	movs	r2, #15
 8002056:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <HAL_RCC_GetClockConfig+0x58>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0203 	and.w	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_RCC_GetClockConfig+0x58>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCC_GetClockConfig+0x58>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_RCC_GetClockConfig+0x58>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_RCC_GetClockConfig+0x5c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0207 	and.w	r2, r3, #7
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40022000 	.word	0x40022000

080020a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020b0:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <RCC_Delay+0x34>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <RCC_Delay+0x38>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0a5b      	lsrs	r3, r3, #9
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020c4:	bf00      	nop
  }
  while (Delay --);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1e5a      	subs	r2, r3, #1
 80020ca:	60fa      	str	r2, [r7, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f9      	bne.n	80020c4 <RCC_Delay+0x1c>
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000000 	.word	0x20000000
 80020e0:	10624dd3 	.word	0x10624dd3

080020e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e01d      	b.n	8002132 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f815 	bl	800213a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3304      	adds	r3, #4
 8002120:	4619      	mov	r1, r3
 8002122:	4610      	mov	r0, r2
 8002124:	f000 f962 	bl	80023ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b06      	cmp	r3, #6
 8002174:	d007      	beq.n	8002186 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 0201 	orr.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d122      	bne.n	80021ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d11b      	bne.n	80021ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f06f 0202 	mvn.w	r2, #2
 80021be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f8ed 	bl	80023b4 <HAL_TIM_IC_CaptureCallback>
 80021da:	e005      	b.n	80021e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f8e0 	bl	80023a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f8ef 	bl	80023c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d122      	bne.n	8002242 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b04      	cmp	r3, #4
 8002208:	d11b      	bne.n	8002242 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f06f 0204 	mvn.w	r2, #4
 8002212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f8c3 	bl	80023b4 <HAL_TIM_IC_CaptureCallback>
 800222e:	e005      	b.n	800223c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f8b6 	bl	80023a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f8c5 	bl	80023c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b08      	cmp	r3, #8
 800224e:	d122      	bne.n	8002296 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b08      	cmp	r3, #8
 800225c:	d11b      	bne.n	8002296 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f06f 0208 	mvn.w	r2, #8
 8002266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2204      	movs	r2, #4
 800226c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f899 	bl	80023b4 <HAL_TIM_IC_CaptureCallback>
 8002282:	e005      	b.n	8002290 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f88c 	bl	80023a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f89b 	bl	80023c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	2b10      	cmp	r3, #16
 80022a2:	d122      	bne.n	80022ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b10      	cmp	r3, #16
 80022b0:	d11b      	bne.n	80022ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f06f 0210 	mvn.w	r2, #16
 80022ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2208      	movs	r2, #8
 80022c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f86f 	bl	80023b4 <HAL_TIM_IC_CaptureCallback>
 80022d6:	e005      	b.n	80022e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f862 	bl	80023a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f871 	bl	80023c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d10e      	bne.n	8002316 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b01      	cmp	r3, #1
 8002304:	d107      	bne.n	8002316 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f06f 0201 	mvn.w	r2, #1
 800230e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7fd ffe5 	bl	80002e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002320:	2b80      	cmp	r3, #128	; 0x80
 8002322:	d10e      	bne.n	8002342 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232e:	2b80      	cmp	r3, #128	; 0x80
 8002330:	d107      	bne.n	8002342 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800233a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f8c0 	bl	80024c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234c:	2b40      	cmp	r3, #64	; 0x40
 800234e:	d10e      	bne.n	800236e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235a:	2b40      	cmp	r3, #64	; 0x40
 800235c:	d107      	bne.n	800236e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f835 	bl	80023d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f003 0320 	and.w	r3, r3, #32
 8002378:	2b20      	cmp	r3, #32
 800237a:	d10e      	bne.n	800239a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b20      	cmp	r3, #32
 8002388:	d107      	bne.n	800239a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f06f 0220 	mvn.w	r2, #32
 8002392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f88b 	bl	80024b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
	...

080023ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a29      	ldr	r2, [pc, #164]	; (80024a4 <TIM_Base_SetConfig+0xb8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d00b      	beq.n	800241c <TIM_Base_SetConfig+0x30>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240a:	d007      	beq.n	800241c <TIM_Base_SetConfig+0x30>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <TIM_Base_SetConfig+0xbc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d003      	beq.n	800241c <TIM_Base_SetConfig+0x30>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a25      	ldr	r2, [pc, #148]	; (80024ac <TIM_Base_SetConfig+0xc0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d108      	bne.n	800242e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <TIM_Base_SetConfig+0xb8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00b      	beq.n	800244e <TIM_Base_SetConfig+0x62>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243c:	d007      	beq.n	800244e <TIM_Base_SetConfig+0x62>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a19      	ldr	r2, [pc, #100]	; (80024a8 <TIM_Base_SetConfig+0xbc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d003      	beq.n	800244e <TIM_Base_SetConfig+0x62>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a18      	ldr	r2, [pc, #96]	; (80024ac <TIM_Base_SetConfig+0xc0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d108      	bne.n	8002460 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	4313      	orrs	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <TIM_Base_SetConfig+0xb8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d103      	bne.n	8002494 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	615a      	str	r2, [r3, #20]
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40000400 	.word	0x40000400
 80024ac:	40000800 	.word	0x40000800

080024b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <__libc_init_array>:
 80024d4:	b570      	push	{r4, r5, r6, lr}
 80024d6:	2500      	movs	r5, #0
 80024d8:	4e0c      	ldr	r6, [pc, #48]	; (800250c <__libc_init_array+0x38>)
 80024da:	4c0d      	ldr	r4, [pc, #52]	; (8002510 <__libc_init_array+0x3c>)
 80024dc:	1ba4      	subs	r4, r4, r6
 80024de:	10a4      	asrs	r4, r4, #2
 80024e0:	42a5      	cmp	r5, r4
 80024e2:	d109      	bne.n	80024f8 <__libc_init_array+0x24>
 80024e4:	f000 f822 	bl	800252c <_init>
 80024e8:	2500      	movs	r5, #0
 80024ea:	4e0a      	ldr	r6, [pc, #40]	; (8002514 <__libc_init_array+0x40>)
 80024ec:	4c0a      	ldr	r4, [pc, #40]	; (8002518 <__libc_init_array+0x44>)
 80024ee:	1ba4      	subs	r4, r4, r6
 80024f0:	10a4      	asrs	r4, r4, #2
 80024f2:	42a5      	cmp	r5, r4
 80024f4:	d105      	bne.n	8002502 <__libc_init_array+0x2e>
 80024f6:	bd70      	pop	{r4, r5, r6, pc}
 80024f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024fc:	4798      	blx	r3
 80024fe:	3501      	adds	r5, #1
 8002500:	e7ee      	b.n	80024e0 <__libc_init_array+0xc>
 8002502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002506:	4798      	blx	r3
 8002508:	3501      	adds	r5, #1
 800250a:	e7f2      	b.n	80024f2 <__libc_init_array+0x1e>
 800250c:	08002580 	.word	0x08002580
 8002510:	08002580 	.word	0x08002580
 8002514:	08002580 	.word	0x08002580
 8002518:	08002584 	.word	0x08002584

0800251c <memset>:
 800251c:	4603      	mov	r3, r0
 800251e:	4402      	add	r2, r0
 8002520:	4293      	cmp	r3, r2
 8002522:	d100      	bne.n	8002526 <memset+0xa>
 8002524:	4770      	bx	lr
 8002526:	f803 1b01 	strb.w	r1, [r3], #1
 800252a:	e7f9      	b.n	8002520 <memset+0x4>

0800252c <_init>:
 800252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252e:	bf00      	nop
 8002530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002532:	bc08      	pop	{r3}
 8002534:	469e      	mov	lr, r3
 8002536:	4770      	bx	lr

08002538 <_fini>:
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	bf00      	nop
 800253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253e:	bc08      	pop	{r3}
 8002540:	469e      	mov	lr, r3
 8002542:	4770      	bx	lr
